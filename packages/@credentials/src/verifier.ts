import { Ed25519Signature2020 } from "@digitalbazaar/ed25519-signature-2020";
import { Ed25519VerificationKey2020 } from "@digitalbazaar/ed25519-verification-key-2020";
import * as vc from "@digitalbazaar/vc";
import type { JsonLDDocumentLoaderInstance } from "jsonld-document-loader";
import { defaultDocumentLoader } from "./utils/loader";
import type { VerifiableCredential, VerifiableCredentialSubject } from "./utils/types";

export interface VerifyCredentialsIssuer {
  issuer: string;

  /* Multibase encoded public key */
  publicKeyMultibase: string;

  /* If missing it will be generated by the library ${issuer}/keys/1 */
  id?: string;

  /* If missing it will be generated by the library ${issuer}/issuer/1 */
  controller?: string;
}

export async function verifyCredentials<K = VerifiableCredentialSubject>(
  credential: VerifiableCredential<K>,
  issuers: VerifyCredentialsIssuer[],
  customDocumentLoader?: JsonLDDocumentLoaderInstance,
): Promise<boolean> {
  for (const issuer of issuers) {
    const publicKey = await Ed25519VerificationKey2020.from({
      id: issuer.id ?? `${issuer.issuer}/keys/1`,
      controller: issuer.controller ?? `${issuer.issuer}/issuer/1`,
      publicKeyMultibase: issuer.publicKeyMultibase,
      type: "Ed25519VerificationKey2020",
    });

    const vcVerifyingSuite = new Ed25519Signature2020({
      key: publicKey,
      verificationMethod: publicKey.id,
    });

    const controller = {
      "@context": "https://w3id.org/security/v2",
      id: publicKey.controller,
      assertionMethod: [publicKey.id],
      authentication: [publicKey.id],
    };

    // Verify the signature
    const verifyCredentialResult = await vc.verifyCredential<K>({
      credential: credential,
      suite: vcVerifyingSuite,
      controller,
      documentLoader: customDocumentLoader ?? defaultDocumentLoader,
    });

    if (verifyCredentialResult.verified) {
      return true;
    }
  }

  return false;
}
